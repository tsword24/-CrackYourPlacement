20.Valid Parentheses

CODE:

class Solution {
public:
    bool isValid(string s) {
        stack<char> stk;
        for(char x:s){
            if(x=='{'||x=='('||x=='['){
            stk.push(x);}
            else{
                if(stk.empty()||x=='}'&&stk.top()!='{'
                ||x==']'&&stk.top()!='['
                ||x==')'&&stk.top()!='('){
                    return false;
                }
                else{
                    stk.pop();
                }
        }
    }
            return true;
    }
};


Time Taken:14mins


----------------------------------------------------------------------

Print all The Dupplicate characters in the string

#include<bits/stdc++.h>
using namespace std;
void dupstr(string s){
    unordered_map<char,int> count;
    for(int i=0;i<s.length();i++){
        count[s[i]]++;
    }
    for(auto it:count){
        if(it.second>1){
            cout<<it.first<<"count : "<<it.second;
            cout<<"\n";
        }
    }
}

int main(){
    string str;
    cin>>str;
    dupstr(str);
}
time:21 mins
-------------------------------------------------------------------------

28 Find the index of the first occurance



class Solution {
public:
    int strStr(string haystack, string needle) {
        int m=haystack.length();
        int n=needle.length();
        for(int i=0;i<m-n+1;i++){
            int j=0;
            while(j<n){
                if(haystack[i+j]==needle[j]){
                    j++;
                }
                else{
                    break;
                }
            }
            if(j==n){
                return i;
            }
        }
        return -1;
    }
};

time:40 mins

------------------------------------------------------

628 Maximum Product of Three Numbers

class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        return max(nums[0]*nums[1]*nums[n-1],nums[n-1]*nums[n-2]*nums[n-3]);
    }
};


Time Taken:10mins
---------------------------------------------------------
168 Excel Sheet Column Titles

class Solution {
public:
    string convertToTitle(int columnNumber) {
        if(columnNumber==0){
            return "";
        }
        else{
            columnNumber--;
            char c='A'+columnNumber%26;
            return convertToTitle(columnNumber/26)+c;
        }
    }
};


----------------------------------------------------------
232 Implement Queues using stacks


class MyQueue {
public:
    stack<int> s1;
    stack<int> s2;
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        while(!s1.empty()) {
            s2.push(s1.top());
            s1.pop();
        }
        s2.push(x);
        while(!s2.empty()) {
            s1.push(s2.top());
            s2.pop();
        }
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        int curr = s1.top();
        s1.pop();
        return curr;
    }
    
    /** Get the front element. */
    int peek() {
        return s1.top();
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return s1.empty();
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */


Time Taken :30min 


Time Taken:10mins
-----------------------------------------------------


